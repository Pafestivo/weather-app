(()=>{"use strict";var n={740:(n,e,t)=>{t.d(e,{Z:()=>p});var o=t(537),r=t.n(o),i=t(645),a=t.n(i),s=t(667),c=t.n(s),l=new URL(t(943),t.b),A=a()(r()),d=c()(l);A.push([n.id,"body {\n  background-image: url("+d+");\n}","",{version:3,sources:["webpack://./src/styles/light-theme.css"],names:[],mappings:"AAAA;EACE,yDAA4C;AAC9C",sourcesContent:["body {\n  background-image: url(../images/day-sky.jpg);\n}"],sourceRoot:""}]);const p=A},756:(n,e,t)=>{t.d(e,{Z:()=>s});var o=t(537),r=t.n(o),i=t(645),a=t.n(i)()(r());a.push([n.id,"body {\n  background-attachment: fixed;\n  background-size: cover;\n  color: white;\n}\n\n.search-box {\n  display: flex;\n  width: max-content;\n  margin: 40px auto;\n  column-gap: 10px;\n  overflow-y: visible;\n}\n\n.search-box input[type='text'] {\n  height: 30px;\n  width: 300px;\n  background-color: transparent;\n  border: none;\n  border-bottom: 2px solid rgb(189, 189, 189);\n  font-size: 30px;\n  color: white;\n  padding: 0 0 5px 5px;\n}\n\n.search-box input[type='text']:focus {\n  outline: none;\n}\n\n.search-box i {\n  font-size: 25px;\n  cursor: pointer;\n}\n\n.details {\n  margin: 20px auto;\n  width: max-content;\n  padding: 10px;\n  display: grid;\n  row-gap: 20px;\n  column-gap: 20px;\n  text-align: center;\n}\n\n.title {\n  display: flex;\n  flex-direction: column;\n  row-gap: 5px;\n}\n\n#weather {\n  font-size: 40px;\n  font-weight: bold;\n}\n\n#name {\n  font-size:25px;\n  font-weight: bold;\n}\n\n#temp {\n  font-weight: bold;\n  text-align: center;\n}\n\n.local-times {\n  display: flex;\n  flex-direction: column;\n  row-gap: 5px;\n}\n\nbutton {\n  display: block;\n  border: none;\n  padding: 10px;\n  color: white;\n  background-color: transparent;\n  font-weight: bold;\n  font-size: 20px;\n  cursor: pointer;\n  margin:0 auto;\n}\n","",{version:3,sources:["webpack://./src/styles/main.css"],names:[],mappings:"AAAA;EACE,4BAA4B;EAC5B,sBAAsB;EACtB,YAAY;AACd;;AAEA;EACE,aAAa;EACb,kBAAkB;EAClB,iBAAiB;EACjB,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,6BAA6B;EAC7B,YAAY;EACZ,2CAA2C;EAC3C,eAAe;EACf,YAAY;EACZ,oBAAoB;AACtB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,eAAe;EACf,eAAe;AACjB;;AAEA;EACE,iBAAiB;EACjB,kBAAkB;EAClB,aAAa;EACb,aAAa;EACb,aAAa;EACb,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,YAAY;AACd;;AAEA;EACE,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,cAAc;EACd,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,YAAY;AACd;;AAEA;EACE,cAAc;EACd,YAAY;EACZ,aAAa;EACb,YAAY;EACZ,6BAA6B;EAC7B,iBAAiB;EACjB,eAAe;EACf,eAAe;EACf,aAAa;AACf",sourcesContent:["body {\n  background-attachment: fixed;\n  background-size: cover;\n  color: white;\n}\n\n.search-box {\n  display: flex;\n  width: max-content;\n  margin: 40px auto;\n  column-gap: 10px;\n  overflow-y: visible;\n}\n\n.search-box input[type='text'] {\n  height: 30px;\n  width: 300px;\n  background-color: transparent;\n  border: none;\n  border-bottom: 2px solid rgb(189, 189, 189);\n  font-size: 30px;\n  color: white;\n  padding: 0 0 5px 5px;\n}\n\n.search-box input[type='text']:focus {\n  outline: none;\n}\n\n.search-box i {\n  font-size: 25px;\n  cursor: pointer;\n}\n\n.details {\n  margin: 20px auto;\n  width: max-content;\n  padding: 10px;\n  display: grid;\n  row-gap: 20px;\n  column-gap: 20px;\n  text-align: center;\n}\n\n.title {\n  display: flex;\n  flex-direction: column;\n  row-gap: 5px;\n}\n\n#weather {\n  font-size: 40px;\n  font-weight: bold;\n}\n\n#name {\n  font-size:25px;\n  font-weight: bold;\n}\n\n#temp {\n  font-weight: bold;\n  text-align: center;\n}\n\n.local-times {\n  display: flex;\n  flex-direction: column;\n  row-gap: 5px;\n}\n\nbutton {\n  display: block;\n  border: none;\n  padding: 10px;\n  color: white;\n  background-color: transparent;\n  font-weight: bold;\n  font-size: 20px;\n  cursor: pointer;\n  margin:0 auto;\n}\n"],sourceRoot:""}]);const s=a},890:(n,e,t)=>{t.d(e,{Z:()=>m});var o=t(537),r=t.n(o),i=t(645),a=t.n(i),s=t(667),c=t.n(s),l=new URL(t(65),t.b),A=new URL(t(286),t.b),d=a()(r()),p=c()(l),u=c()(A);d.push([n.id,"* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\n/* montserrat-regular - latin */\n@font-face {\n  font-display: swap; /* Check https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display for other options. */\n  font-family: 'Montserrat';\n  font-style: normal;\n  font-weight: 400;\n  src: url("+p+") format('woff2'), /* Chrome 36+, Opera 23+, Firefox 39+ */\n       url("+u+") format('woff'); /* Chrome 5+, Firefox 3.6+, IE 9+, Safari 5.1+ */\n}\n\nbody {\n  font-family: 'Montserrat', 'serif';\n}","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;EACT,sBAAsB;AACxB;;AAEA,+BAA+B;AAC/B;EACE,kBAAkB,EAAE,sGAAsG;EAC1H,yBAAyB;EACzB,kBAAkB;EAClB,gBAAgB;EAChB;6DACqE,EAAE,gDAAgD;AACzH;;AAEA;EACE,kCAAkC;AACpC",sourcesContent:["* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\n/* montserrat-regular - latin */\n@font-face {\n  font-display: swap; /* Check https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display for other options. */\n  font-family: 'Montserrat';\n  font-style: normal;\n  font-weight: 400;\n  src: url('../fonts/montserrat-v25-latin-regular.woff2') format('woff2'), /* Chrome 36+, Opera 23+, Firefox 39+ */\n       url('../fonts/montserrat-v25-latin-regular.woff') format('woff'); /* Chrome 5+, Firefox 3.6+, IE 9+, Safari 5.1+ */\n}\n\nbody {\n  font-family: 'Montserrat', 'serif';\n}"],sourceRoot:""}]);const m=d},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<n.length;l++){var A=[].concat(n[l]);o&&a[A[0]]||(void 0!==i&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=i),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),r&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=r):A[4]="".concat(r)),e.push(A))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var i={},a=[],s=0;s<n.length;s++){var c=n[s],l=o.base?c[0]+o.base:c[0],A=i[l]||0,d="".concat(l," ").concat(A);i[l]=A+1;var p=t(d),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var m=r(u,o);o.byIndex=s,e.splice(s,0,{identifier:d,updater:m,references:1})}a.push(d)}return a}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var i=o(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var s=t(i[a]);e[s].references--}for(var c=o(n,r),l=0;l<i.length;l++){var A=t(i[l]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}i=c}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},286:(n,e,t)=>{n.exports=t.p+"fonts/montserrat-v25-latin-regular.woff"},65:(n,e,t)=>{n.exports=t.p+"fonts/montserrat-v25-latin-regular.woff2"},943:(n,e,t)=>{n.exports=t.p+"images/day-sky.jpg"}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={id:o,exports:{}};return n[o](i,i.exports,t),i.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var o=e.getElementsByTagName("script");o.length&&(n=o[o.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{function n(n,e){let t;t=e?new Date(1e3*e).getTime():(new Date).getTime();const o=6e4*(new Date).getTimezoneOffset(),r=new Date(o+t+1e3*n),i=`0${r.getHours()}`,a=`0${r.getMinutes()}`;return`${i.slice(-2)}:${a.slice(-2)}`}var e=t(379),o=t.n(e),r=t(795),i=t.n(r),a=t(569),s=t.n(a),c=t(565),l=t.n(c),A=t(216),d=t.n(A),p=t(589),u=t.n(p),m=t(890),f={};f.styleTagTransform=u(),f.setAttributes=l(),f.insert=s().bind(null,"head"),f.domAPI=i(),f.insertStyleElement=d(),o()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;var g=t(756),h={};h.styleTagTransform=u(),h.setAttributes=l(),h.insert=s().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=d(),o()(g.Z,h),g.Z&&g.Z.locals&&g.Z.locals;var y=t(740),E={};E.styleTagTransform=u(),E.setAttributes=l(),E.insert=s().bind(null,"head"),E.domAPI=i(),E.insertStyleElement=d(),o()(y.Z,E),y.Z&&y.Z.locals&&y.Z.locals;const C=document.querySelector("form"),x=document.getElementById("location"),b=document.getElementById("search"),B=document.getElementById("changeUnits"),w=document.getElementById("name");let v="metric";async function k(e,t){try{!function(n){const e=document.getElementById("name"),t=document.getElementById("localTime"),o=document.getElementById("temp"),r=document.getElementById("sunrise"),i=document.getElementById("sunset"),a=document.getElementById("weather"),s=document.getElementById("humidity"),c=document.getElementById("minMaxTemp"),l=document.getElementById("visibility"),A=document.getElementById("windSpeed"),d=document.getElementById("clouds"),p=document.getElementById("rain"),u=document.getElementById("snow");document.querySelector("body").id=n.theme,e.textContent=`${n.name} (${n.country})`,t.textContent=`Local Time: ${n.localTime}`,o.textContent=`Currently ${n.temp}`,r.textContent=`Sunrise: ${n.sunrise}`,i.textContent=`Sunset: ${n.sunset}`,a.textContent=n.weather,c.textContent=`( Low: ${n.minTemp}, High: ${n.maxTemp} )`,s.textContent=`Humidity: ${n.humidity}`,l.textContent=`Visibility: ${n.visibility}`,A.textContent=`Wind: ${n.windSpeed}`,d.textContent=`Clouds: ${n.clouds}`,p.textContent=`Rain: ${n.rain}`,u.textContent=`Snow: ${n.snow}`}(await async function(e,t){const o=`https://api.openweathermap.org/data/2.5/weather?q=${e}&units=${t}&APPID=80b5e34940d5d647c671753b685314a7`,r=await fetch(o,{mode:"cors"});return function(e,t){let o,r;"metric"===t?(o=" °C",r="(M/S)"):(o=" °F",r="(Mile/H)");const i=e.name,a=e.weather[0].description,s=`${e.main.temp.toFixed(1)}${o}`,c=`${e.main.humidity}%`,l=`${e.main.temp_min.toFixed(1)}${o}`,A=`${e.main.temp_max.toFixed(1)}${o}`,d=`${e.wind.speed}${r}`,p=`${e.clouds.all}%`,u=n(e.timezone),m=n(e.timezone,e.sys.sunrise),f=n(e.timezone,e.sys.sunset);let g=`${e.visibility}(KM)`;1e4===e.visibility&&(g="excellent");let h="-";e.sys.country&&(h=e.sys.country);let y="-";e.snow&&(E=e.snow["1h"]);let E="-";e.rain&&(y=e.rain["1h"]);let C="dark";return e.sys.sunrise<e.dt&&e.dt<e.sys.sunset&&(C="light"),{theme:C,name:i,country:h,localTime:u,sunrise:m,sunset:f,weather:a,temp:s,humidity:c,minTemp:l,maxTemp:A,visibility:g,windSpeed:d,clouds:p,rain:y,snow:E}}(await r.json(),t)}(e,t))}catch(n){console.error(n)}}k("ukraine",v),C.addEventListener("submit",(n=>{n.preventDefault(),k(x.value,v)})),b.addEventListener("click",(()=>{k(x.value,v)})),B.addEventListener("click",(()=>{v="metric"===v?"imperial":"metric",k(w.textContent.split(" (")[0].replace("City Name: ",""),v)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,